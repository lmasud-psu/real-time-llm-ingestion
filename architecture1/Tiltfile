# Tiltfile for Real-time LLM Ingestion Architecture
# Uses centralized docker-compose.yml with database-specific configurations

# Get the database type from environment variable, default to lancedb
database_type = os.environ.get("DATABASE_TYPE", "lancedb").lower()

# Validate database type
allowed_databases = ["lancedb", "postgres"]
if database_type not in allowed_databases:
    fail("❌ Invalid DATABASE_TYPE. Must be one of: " + ", ".join(allowed_databases))

print("🔄 Starting architecture with database: " + database_type)

# Load the base docker-compose.yml
docker_compose_config = ["docker-compose.yml"]

# Add database-specific configuration
if database_type == "postgres":
    docker_compose_config.append("docker-compose.postgres.yml")
    print("📊 PostgreSQL configuration loaded")
else:
    docker_compose_config.append("docker-compose.lacedb.yml")
    print("📦 LanceDB configuration loaded")

# Load the docker-compose configuration
docker_compose(docker_compose_config)

# Ensure network is created first
local_resource(
    name="ensure-network",
    cmd="docker network create kafka-network 2>/dev/null || true",
    deps=[],
    ignore=[],
    auto_init=True
)

# Add helpful local resources for operations
local_resource(
    name="create-topics",
    cmd="cd ../kafka && python kafka_cli.py create-topic text-messages && python kafka_cli.py create-topic embeddings",
    deps=[],
    ignore=["*.log"]
)

local_resource(
    name="send-test-message",
    cmd="cd ../kafka && python kafka_cli.py write text-messages 'Test message for embedding generation'",
    deps=["create-topics"],
    ignore=["*.log"]
)

local_resource(
    name="read-embeddings",
    cmd="cd ../kafka && python kafka_cli.py read embeddings --max-messages 5",
    deps=["send-test-message"],
    ignore=["*.log"]
)

local_resource(
    name="health-check",
    cmd="echo 'Checking service health...' && curl -f http://localhost:5000/health && echo 'Embedding service healthy'",
    deps=[],
    ignore=["*.log"]
)

# Add database-specific health checks
if database_type == "postgres":
    local_resource(
        name="db-health-check",
        cmd="curl -f http://localhost:5432 || echo 'PostgreSQL is running on port 5432'",
        deps=[],
        ignore=["*.log"]
    )
else:
    local_resource(
        name="db-health-check",
        cmd="curl -f http://localhost:9090 || echo 'LanceDB is running on port 9090'",
        deps=[],
        ignore=["*.log"]
    )

print("\n✨ Setup Complete!")
print("📚 Available Commands:")
print("   • Start services: ")
print("     ▸ Default (LanceDB): tilt up")
print("     ▸ PostgreSQL: DATABASE_TYPE=postgres tilt up")
print("   • Operations:")
print("     ▸ Run specific task: tilt trigger <resource-name>")
print("     ▸ View resources: tilt get uiresources")
print("     ▸ View logs: tilt logs")
print("   • Health Checks:")
print("     ▸ Services: tilt trigger health-check")
print("     ▸ Database: tilt trigger db-health-check")
