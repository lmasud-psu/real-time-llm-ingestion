# Tiltfile for Real-time LLM Ingestion Architecture
# Uses centralized docker-compose.yml with PostgreSQL database

print("ðŸ”„ Starting architecture with PostgreSQL database")

# Load the docker-compose configuration files
docker_compose_config = ["docker-compose.yml", "docker-compose.postgres.yml"]
print("ðŸ“Š PostgreSQL configuration loaded")

# Load the docker-compose configuration
docker_compose(docker_compose_config)

# Ensure network is created first
local_resource(
    name="ensure-network",
    cmd="docker network create kafka-network 2>/dev/null || true",
    deps=[],
    ignore=[],
    auto_init=True
)

# Add helpful local resources for operations
local_resource(
    name="create-topics",
    cmd="cd ../kafka && python kafka_cli.py create-topic text-messages && python kafka_cli.py create-topic embeddings",
    deps=[],
    ignore=["*.log"]
)

local_resource(
    name="send-test-message",
    cmd="cd ../kafka && python kafka_cli.py write text-messages 'Test message for embedding generation'",
    deps=["create-topics"],
    ignore=["*.log"]
)

local_resource(
    name="read-embeddings",
    cmd="cd ../kafka && python kafka_cli.py read embeddings --max-messages 5",
    deps=["send-test-message"],
    ignore=["*.log"]
)

local_resource(
    name="health-check",
    cmd="echo 'Checking service health...' && curl -f http://localhost:5000/health && echo 'Embedding service healthy'",
    deps=[],
    ignore=["*.log"]
)

# PostgreSQL health check
local_resource(
    name="db-health-check",
    cmd="curl -f http://localhost:5432 || echo 'PostgreSQL is running on port 5432'",
    deps=[],
    ignore=["*.log"]
)

# Add validation resources to check that writes are working
local_resource(
    name="validate-writer-service",
    cmd="echo 'Checking writer service health...' && curl -f http://localhost:5001/health && echo 'Writer service healthy'",
    deps=[],
    ignore=["*.log"]
)

# PostgreSQL validation resources
local_resource(
    name="validate-postgres-writes",
    cmd="cd ../pgvector && python pgvector_cli.py query-table embeddings --limit 5",
    deps=["validate-writer-service"],
    ignore=["*.log"]
)

local_resource(
    name="test-postgres-insert",
    cmd="cd ../pgvector && python pgvector_cli.py insert-data embeddings '{\"id\": \"tilt-test-001\", \"text\": \"Test from Tilt\", \"embedding\": [0.1, 0.2, 0.3], \"timestamp\": \"2024-01-01T00:00:00Z\", \"source\": \"tilt-test\"}'",
    deps=["validate-postgres-writes"],
    ignore=["*.log"]
)

local_resource(
    name="verify-postgres-data",
    cmd="cd ../pgvector && echo 'Verifying data in PostgreSQL...' && python pgvector_cli.py query-table embeddings --limit 10",
    deps=["test-postgres-insert"],
    ignore=["*.log"]
)

# End-to-end validation moved to e2e_test.sh
# Run: ./e2e_test.sh

# Direct writer service test with proper message format
local_resource(
    name="test-writer-direct",
    cmd="echo 'Testing writer service directly...' && echo '1. Sending properly formatted message to embeddings topic...' && docker compose exec -T kafka kafka-console-producer --bootstrap-server kafka:29092 --topic embeddings <<< '{\"id\": \"direct-test-001\", \"text\": \"Direct test message\", \"embedding\": [0.1, 0.2, 0.3], \"timestamp\": \"2024-01-01T00:00:00Z\", \"source\": \"direct-test\", \"table_name\": \"embeddings\"}' && echo '2. Message sent, waiting for processing...' && sleep 5 && echo '3. Checking writer service stats...' && curl -s http://localhost:5001/stats | python -m json.tool",
    deps=["validate-writer-service"],
    ignore=["*.log"]
)

print("\nâœ¨ Setup Complete!")
print("ðŸ“š Available Commands:")
print("   â€¢ Start services: tilt up")
print("   â€¢ Operations:")
print("     â–¸ Run specific task: tilt trigger <resource-name>")
print("     â–¸ View resources: tilt get uiresources")
print("     â–¸ View logs: tilt logs")
print("   â€¢ Health Checks:")
print("     â–¸ Services: tilt trigger health-check")
print("     â–¸ Database: tilt trigger db-health-check")
print("   â€¢ Validation:")
print("     â–¸ Writer Service: tilt trigger validate-writer-service")
print("     â–¸ PostgreSQL Writes: tilt trigger validate-postgres-writes")
print("     â–¸ Direct Writer Test: tilt trigger test-writer-direct")
